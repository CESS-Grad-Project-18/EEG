
Sensor_CAN_Ex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000edc  00000f70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000edc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000f70  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000016d3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000108  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c84  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000611  00000000  00000000  0000248e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008b3  00000000  00000000  00002a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000025c  00000000  00000000  00003354  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003e8  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cfe  00000000  00000000  00003998  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00004696  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a3 30       	cpi	r26, 0x03	; 3
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 c7 06 	call	0xd8e	; 0xd8e <main>
  9c:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <can_clear_all_mob>:
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	ad ee       	ldi	r26, 0xED	; 237
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	8e ee       	ldi	r24, 0xEE	; 238
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	32 2f       	mov	r19, r18
  b0:	32 95       	swap	r19
  b2:	30 7f       	andi	r19, 0xF0	; 240
  b4:	3c 93       	st	X, r19
  b6:	fc 01       	movw	r30, r24
  b8:	11 92       	st	Z+, r1
  ba:	e8 3f       	cpi	r30, 0xF8	; 248
  bc:	f1 05       	cpc	r31, r1
  be:	e1 f7       	brne	.-8      	; 0xb8 <can_clear_all_mob+0x14>
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	26 30       	cpi	r18, 0x06	; 6
  c4:	a1 f7       	brne	.-24     	; 0xae <can_clear_all_mob+0xa>
  c6:	08 95       	ret

000000c8 <can_get_mob_free>:
  c8:	ed ee       	ldi	r30, 0xED	; 237
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	20 81       	ld	r18, Z
  ce:	10 82       	st	Z, r1
  d0:	80 91 ef 00 	lds	r24, 0x00EF
  d4:	80 7c       	andi	r24, 0xC0	; 192
  d6:	69 f0       	breq	.+26     	; 0xf2 <can_get_mob_free+0x2a>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	ad ee       	ldi	r26, 0xED	; 237
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ef ee       	ldi	r30, 0xEF	; 239
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	98 2f       	mov	r25, r24
  e4:	92 95       	swap	r25
  e6:	90 7f       	andi	r25, 0xF0	; 240
  e8:	9c 93       	st	X, r25
  ea:	90 81       	ld	r25, Z
  ec:	90 7c       	andi	r25, 0xC0	; 192
  ee:	29 f4       	brne	.+10     	; 0xfa <can_get_mob_free+0x32>
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <can_get_mob_free+0x2c>
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	20 93 ed 00 	sts	0x00ED, r18
  f8:	08 95       	ret
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
  fa:	8f 5f       	subi	r24, 0xFF	; 255
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
  fc:	86 30       	cpi	r24, 0x06	; 6
  fe:	89 f7       	brne	.-30     	; 0xe2 <can_get_mob_free+0x1a>
 100:	20 93 ed 00 	sts	0x00ED, r18
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
 104:	8f ef       	ldi	r24, 0xFF	; 255
    uint8_t  ovrtim_flag=0;                          //! Timer overflow count
    uint16_t conf_index;                             //! Count of bit timing configuration tried
    uint8_t  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
 106:	08 95       	ret

00000108 <can_get_mob_status>:
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
 108:	80 91 ef 00 	lds	r24, 0x00EF
 10c:	80 7c       	andi	r24, 0xC0	; 192
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
 10e:	69 f0       	breq	.+26     	; 0x12a <can_get_mob_status+0x22>
 110:	90 91 ee 00 	lds	r25, 0x00EE
    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
 114:	89 2f       	mov	r24, r25
 116:	80 7e       	andi	r24, 0xE0	; 224
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
 118:	80 32       	cpi	r24, 0x20	; 32
 11a:	41 f0       	breq	.+16     	; 0x12c <can_get_mob_status+0x24>
 11c:	80 34       	cpi	r24, 0x40	; 64
 11e:	31 f0       	breq	.+12     	; 0x12c <can_get_mob_status+0x24>

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
 120:	80 3a       	cpi	r24, 0xA0	; 160
 122:	21 f0       	breq	.+8      	; 0x12c <can_get_mob_status+0x24>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
 124:	89 2f       	mov	r24, r25
    {
        Can_set_mob(u8_temp0);  //! Page index
 126:	8f 71       	andi	r24, 0x1F	; 31
 128:	08 95       	ret
        Can_clear_mob();        //! All MOb Registers = 0x00
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	08 95       	ret

0000012e <can_get_data>:
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    {
        Can_set_mob(u8_temp0);  //! Page index
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	20 91 ef 00 	lds	r18, 0x00EF
        Can_clear_mob();        //! All MOb Registers = 0x00
 136:	2f 70       	andi	r18, 0x0F	; 15
 138:	99 f0       	breq	.+38     	; 0x160 <can_get_data+0x32>
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	ca ef       	ldi	r28, 0xFA	; 250
 13e:	d0 e0       	ldi	r29, 0x00	; 0
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
 140:	af ee       	ldi	r26, 0xEF	; 239
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	28 81       	ld	r18, Y
 146:	fc 01       	movw	r30, r24
 148:	e6 0f       	add	r30, r22
 14a:	f1 1d       	adc	r31, r1
 14c:	20 83       	st	Z, r18
 14e:	6f 5f       	subi	r22, 0xFF	; 255

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
        {
            Can_reset();
 150:	2c 91       	ld	r18, X
 152:	46 2f       	mov	r20, r22
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	2f 70       	andi	r18, 0x0F	; 15
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (uint8_t)(conf_index >> 3);

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	42 17       	cp	r20, r18
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
 15c:	53 07       	cpc	r21, r19
 15e:	94 f3       	brlt	.-28     	; 0x144 <can_get_data+0x16>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
    {
        if (try_conf == 1)
        {
            Can_reset();
            conf_index++;
            ovrtim_flag=0;
 164:	08 95       	ret

00000166 <can_fixed_baudrate>:
                {
                    if (ovrtim_flag==0)
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
                        ovrtim_flag++;
 166:	81 e0       	ldi	r24, 0x01	; 1

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
 168:	80 93 d8 00 	sts	0x00D8, r24
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
                else
                {
                    ntq = NTQ_MIN;
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	80 93 e2 00 	sts	0x00E2, r24
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	80 93 e3 00 	sts	0x00E3, r24
 178:	87 e3       	ldi	r24, 0x37	; 55
 17a:	80 93 e4 00 	sts	0x00E4, r24
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret

00000182 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 182:	0e 94 b3 00 	call	0x166	; 0x166 <can_fixed_baudrate>
 186:	88 23       	and	r24, r24
 188:	49 f0       	breq	.+18     	; 0x19c <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
 18a:	0e 94 52 00 	call	0xa4	; 0xa4 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
 18e:	e8 ed       	ldi	r30, 0xD8	; 216
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	82 60       	ori	r24, 0x02	; 2
 196:	80 83       	st	Z, r24
    return (1);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 19c:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
 19e:	08 95       	ret

000001a0 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <can_cmd+0xa>
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <can_cmd+0xc>
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	8c 01       	movw	r16, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
 1b2:	dc 01       	movw	r26, r24
 1b4:	11 96       	adiw	r26, 0x01	; 1
 1b6:	8c 91       	ld	r24, X
 1b8:	11 97       	sbiw	r26, 0x01	; 1
 1ba:	8c 30       	cpi	r24, 0x0C	; 12
 1bc:	b1 f4       	brne	.+44     	; 0x1ea <can_cmd+0x4a>
  {
    if (cmd->status == MOB_PENDING)
 1be:	19 96       	adiw	r26, 0x09	; 9
 1c0:	8c 91       	ld	r24, X
 1c2:	19 97       	sbiw	r26, 0x09	; 9
 1c4:	80 36       	cpi	r24, 0x60	; 96
 1c6:	69 f4       	brne	.+26     	; 0x1e2 <can_cmd+0x42>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
 1c8:	8c 91       	ld	r24, X
 1ca:	82 95       	swap	r24
 1cc:	80 7f       	andi	r24, 0xF0	; 240
 1ce:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
 1d2:	ef ee       	ldi	r30, 0xEF	; 239
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	8f 73       	andi	r24, 0x3F	; 63
 1da:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure !
 1dc:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
 1e0:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
 1e2:	f8 01       	movw	r30, r16
 1e4:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	1e c5       	rjmp	.+2620   	; 0xc26 <__stack+0x327>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
 1ea:	0e 94 64 00 	call	0xc8	; 0xc8 <can_get_mob_free>
    if (mob_handle!= NO_MOB)
 1ee:	8f 3f       	cpi	r24, 0xFF	; 255
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <can_cmd+0x54>
 1f2:	14 c5       	rjmp	.+2600   	; 0xc1c <__stack+0x31d>
    {
      cmd->status = MOB_PENDING; 
 1f4:	90 e6       	ldi	r25, 0x60	; 96
 1f6:	d8 01       	movw	r26, r16
 1f8:	19 96       	adiw	r26, 0x09	; 9
 1fa:	9c 93       	st	X, r25
 1fc:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
 1fe:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
 200:	82 95       	swap	r24
 202:	80 7f       	andi	r24, 0xF0	; 240
 204:	80 93 ed 00 	sts	0x00ED, r24
      Can_clear_mob();
 208:	ee ee       	ldi	r30, 0xEE	; 238
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	11 92       	st	Z+, r1
 20e:	e8 3f       	cpi	r30, 0xF8	; 248
 210:	f1 05       	cpc	r31, r1
 212:	e1 f7       	brne	.-8      	; 0x20c <can_cmd+0x6c>
          
      switch (cmd->cmd)
 214:	f8 01       	movw	r30, r16
 216:	81 81       	ldd	r24, Z+1	; 0x01
 218:	86 30       	cpi	r24, 0x06	; 6
 21a:	09 f4       	brne	.+2      	; 0x21e <can_cmd+0x7e>
 21c:	fe c1       	rjmp	.+1020   	; 0x61a <can_cmd+0x47a>
 21e:	88 f4       	brcc	.+34     	; 0x242 <can_cmd+0xa2>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	09 f4       	brne	.+2      	; 0x226 <can_cmd+0x86>
 224:	19 c1       	rjmp	.+562    	; 0x458 <can_cmd+0x2b8>
 226:	30 f4       	brcc	.+12     	; 0x234 <can_cmd+0x94>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	01 f1       	breq	.+64     	; 0x26c <can_cmd+0xcc>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	09 f0       	breq	.+2      	; 0x232 <can_cmd+0x92>
 230:	f1 c4       	rjmp	.+2530   	; 0xc14 <__stack+0x315>
 232:	9b c0       	rjmp	.+310    	; 0x36a <can_cmd+0x1ca>
 234:	84 30       	cpi	r24, 0x04	; 4
 236:	09 f4       	brne	.+2      	; 0x23a <can_cmd+0x9a>
 238:	70 c1       	rjmp	.+736    	; 0x51a <can_cmd+0x37a>
 23a:	85 30       	cpi	r24, 0x05	; 5
 23c:	09 f0       	breq	.+2      	; 0x240 <can_cmd+0xa0>
 23e:	ea c4       	rjmp	.+2516   	; 0xc14 <__stack+0x315>
 240:	a7 c1       	rjmp	.+846    	; 0x590 <can_cmd+0x3f0>
 242:	89 30       	cpi	r24, 0x09	; 9
 244:	09 f4       	brne	.+2      	; 0x248 <can_cmd+0xa8>
 246:	4a c3       	rjmp	.+1684   	; 0x8dc <can_cmd+0x73c>
 248:	38 f4       	brcc	.+14     	; 0x258 <can_cmd+0xb8>
 24a:	87 30       	cpi	r24, 0x07	; 7
 24c:	09 f4       	brne	.+2      	; 0x250 <can_cmd+0xb0>
 24e:	2e c2       	rjmp	.+1116   	; 0x6ac <can_cmd+0x50c>
 250:	88 30       	cpi	r24, 0x08	; 8
 252:	09 f0       	breq	.+2      	; 0x256 <can_cmd+0xb6>
 254:	df c4       	rjmp	.+2494   	; 0xc14 <__stack+0x315>
 256:	b1 c2       	rjmp	.+1378   	; 0x7ba <can_cmd+0x61a>
 258:	8a 30       	cpi	r24, 0x0A	; 10
 25a:	21 f0       	breq	.+8      	; 0x264 <can_cmd+0xc4>
 25c:	8b 30       	cpi	r24, 0x0B	; 11
 25e:	09 f0       	breq	.+2      	; 0x262 <can_cmd+0xc2>
 260:	d9 c4       	rjmp	.+2482   	; 0xc14 <__stack+0x315>
 262:	2c c4       	rjmp	.+2136   	; 0xabc <__stack+0x1bd>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 264:	86 81       	ldd	r24, Z+6	; 0x06
 266:	81 11       	cpse	r24, r1
 268:	ce c3       	rjmp	.+1948   	; 0xa06 <__stack+0x107>
 26a:	df c3       	rjmp	.+1982   	; 0xa2a <__stack+0x12b>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 26c:	f8 01       	movw	r30, r16
 26e:	83 85       	ldd	r24, Z+11	; 0x0b
 270:	88 23       	and	r24, r24
 272:	69 f1       	breq	.+90     	; 0x2ce <can_cmd+0x12e>
 274:	94 81       	ldd	r25, Z+4	; 0x04
 276:	92 95       	swap	r25
 278:	96 95       	lsr	r25
 27a:	97 70       	andi	r25, 0x07	; 7
 27c:	85 81       	ldd	r24, Z+5	; 0x05
 27e:	88 0f       	add	r24, r24
 280:	88 0f       	add	r24, r24
 282:	88 0f       	add	r24, r24
 284:	89 0f       	add	r24, r25
 286:	80 93 f3 00 	sts	0x00F3, r24
 28a:	93 81       	ldd	r25, Z+3	; 0x03
 28c:	92 95       	swap	r25
 28e:	96 95       	lsr	r25
 290:	97 70       	andi	r25, 0x07	; 7
 292:	84 81       	ldd	r24, Z+4	; 0x04
 294:	88 0f       	add	r24, r24
 296:	88 0f       	add	r24, r24
 298:	88 0f       	add	r24, r24
 29a:	89 0f       	add	r24, r25
 29c:	80 93 f2 00 	sts	0x00F2, r24
 2a0:	92 81       	ldd	r25, Z+2	; 0x02
 2a2:	92 95       	swap	r25
 2a4:	96 95       	lsr	r25
 2a6:	97 70       	andi	r25, 0x07	; 7
 2a8:	83 81       	ldd	r24, Z+3	; 0x03
 2aa:	88 0f       	add	r24, r24
 2ac:	88 0f       	add	r24, r24
 2ae:	88 0f       	add	r24, r24
 2b0:	89 0f       	add	r24, r25
 2b2:	80 93 f1 00 	sts	0x00F1, r24
 2b6:	82 81       	ldd	r24, Z+2	; 0x02
 2b8:	88 0f       	add	r24, r24
 2ba:	88 0f       	add	r24, r24
 2bc:	88 0f       	add	r24, r24
 2be:	80 93 f0 00 	sts	0x00F0, r24
 2c2:	ef ee       	ldi	r30, 0xEF	; 239
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	80 61       	ori	r24, 0x10	; 16
 2ca:	80 83       	st	Z, r24
 2cc:	17 c0       	rjmp	.+46     	; 0x2fc <can_cmd+0x15c>
          else              { Can_set_std_id(cmd->id.std);}
 2ce:	82 81       	ldd	r24, Z+2	; 0x02
 2d0:	86 95       	lsr	r24
 2d2:	86 95       	lsr	r24
 2d4:	86 95       	lsr	r24
 2d6:	93 81       	ldd	r25, Z+3	; 0x03
 2d8:	b0 e2       	ldi	r27, 0x20	; 32
 2da:	9b 9f       	mul	r25, r27
 2dc:	80 0d       	add	r24, r0
 2de:	11 24       	eor	r1, r1
 2e0:	80 93 f3 00 	sts	0x00F3, r24
 2e4:	f8 01       	movw	r30, r16
 2e6:	82 81       	ldd	r24, Z+2	; 0x02
 2e8:	82 95       	swap	r24
 2ea:	88 0f       	add	r24, r24
 2ec:	80 7e       	andi	r24, 0xE0	; 224
 2ee:	80 93 f2 00 	sts	0x00F2, r24
 2f2:	ef ee       	ldi	r30, 0xEF	; 239
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8f 7e       	andi	r24, 0xEF	; 239
 2fa:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 2fc:	d8 01       	movw	r26, r16
 2fe:	16 96       	adiw	r26, 0x06	; 6
 300:	8c 91       	ld	r24, X
 302:	88 23       	and	r24, r24
 304:	91 f0       	breq	.+36     	; 0x32a <can_cmd+0x18a>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	2a ef       	ldi	r18, 0xFA	; 250
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	d8 01       	movw	r26, r16
 30e:	17 96       	adiw	r26, 0x07	; 7
 310:	ed 91       	ld	r30, X+
 312:	fc 91       	ld	r31, X
 314:	18 97       	sbiw	r26, 0x08	; 8
 316:	e8 0f       	add	r30, r24
 318:	f1 1d       	adc	r31, r1
 31a:	90 81       	ld	r25, Z
 31c:	f9 01       	movw	r30, r18
 31e:	90 83       	st	Z, r25
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	16 96       	adiw	r26, 0x06	; 6
 324:	9c 91       	ld	r25, X
 326:	89 17       	cp	r24, r25
 328:	88 f3       	brcs	.-30     	; 0x30c <can_cmd+0x16c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
 32a:	d8 01       	movw	r26, r16
 32c:	1a 96       	adiw	r26, 0x0a	; 10
 32e:	8c 91       	ld	r24, X
 330:	88 23       	and	r24, r24
 332:	31 f0       	breq	.+12     	; 0x340 <can_cmd+0x1a0>
 334:	e0 ef       	ldi	r30, 0xF0	; 240
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	84 60       	ori	r24, 0x04	; 4
 33c:	80 83       	st	Z, r24
 33e:	05 c0       	rjmp	.+10     	; 0x34a <can_cmd+0x1aa>
            else Can_clear_rtr();    
 340:	e0 ef       	ldi	r30, 0xF0	; 240
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	8b 7f       	andi	r24, 0xFB	; 251
 348:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 34a:	ef ee       	ldi	r30, 0xEF	; 239
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	90 81       	ld	r25, Z
 350:	d8 01       	movw	r26, r16
 352:	16 96       	adiw	r26, 0x06	; 6
 354:	8c 91       	ld	r24, X
 356:	89 2b       	or	r24, r25
 358:	80 83       	st	Z, r24
          Can_config_tx();
 35a:	80 81       	ld	r24, Z
 35c:	8f 73       	andi	r24, 0x3F	; 63
 35e:	80 83       	st	Z, r24
 360:	80 81       	ld	r24, Z
 362:	80 64       	ori	r24, 0x40	; 64
 364:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 366:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 368:	5e c4       	rjmp	.+2236   	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 36a:	f8 01       	movw	r30, r16
 36c:	83 85       	ldd	r24, Z+11	; 0x0b
 36e:	88 23       	and	r24, r24
 370:	69 f1       	breq	.+90     	; 0x3cc <can_cmd+0x22c>
 372:	94 81       	ldd	r25, Z+4	; 0x04
 374:	92 95       	swap	r25
 376:	96 95       	lsr	r25
 378:	97 70       	andi	r25, 0x07	; 7
 37a:	85 81       	ldd	r24, Z+5	; 0x05
 37c:	88 0f       	add	r24, r24
 37e:	88 0f       	add	r24, r24
 380:	88 0f       	add	r24, r24
 382:	89 0f       	add	r24, r25
 384:	80 93 f3 00 	sts	0x00F3, r24
 388:	93 81       	ldd	r25, Z+3	; 0x03
 38a:	92 95       	swap	r25
 38c:	96 95       	lsr	r25
 38e:	97 70       	andi	r25, 0x07	; 7
 390:	84 81       	ldd	r24, Z+4	; 0x04
 392:	88 0f       	add	r24, r24
 394:	88 0f       	add	r24, r24
 396:	88 0f       	add	r24, r24
 398:	89 0f       	add	r24, r25
 39a:	80 93 f2 00 	sts	0x00F2, r24
 39e:	92 81       	ldd	r25, Z+2	; 0x02
 3a0:	92 95       	swap	r25
 3a2:	96 95       	lsr	r25
 3a4:	97 70       	andi	r25, 0x07	; 7
 3a6:	83 81       	ldd	r24, Z+3	; 0x03
 3a8:	88 0f       	add	r24, r24
 3aa:	88 0f       	add	r24, r24
 3ac:	88 0f       	add	r24, r24
 3ae:	89 0f       	add	r24, r25
 3b0:	80 93 f1 00 	sts	0x00F1, r24
 3b4:	82 81       	ldd	r24, Z+2	; 0x02
 3b6:	88 0f       	add	r24, r24
 3b8:	88 0f       	add	r24, r24
 3ba:	88 0f       	add	r24, r24
 3bc:	80 93 f0 00 	sts	0x00F0, r24
 3c0:	ef ee       	ldi	r30, 0xEF	; 239
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	80 61       	ori	r24, 0x10	; 16
 3c8:	80 83       	st	Z, r24
 3ca:	17 c0       	rjmp	.+46     	; 0x3fa <can_cmd+0x25a>
          else              { Can_set_std_id(cmd->id.std);}
 3cc:	82 81       	ldd	r24, Z+2	; 0x02
 3ce:	86 95       	lsr	r24
 3d0:	86 95       	lsr	r24
 3d2:	86 95       	lsr	r24
 3d4:	93 81       	ldd	r25, Z+3	; 0x03
 3d6:	b0 e2       	ldi	r27, 0x20	; 32
 3d8:	9b 9f       	mul	r25, r27
 3da:	80 0d       	add	r24, r0
 3dc:	11 24       	eor	r1, r1
 3de:	80 93 f3 00 	sts	0x00F3, r24
 3e2:	f8 01       	movw	r30, r16
 3e4:	82 81       	ldd	r24, Z+2	; 0x02
 3e6:	82 95       	swap	r24
 3e8:	88 0f       	add	r24, r24
 3ea:	80 7e       	andi	r24, 0xE0	; 224
 3ec:	80 93 f2 00 	sts	0x00F2, r24
 3f0:	ef ee       	ldi	r30, 0xEF	; 239
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	8f 7e       	andi	r24, 0xEF	; 239
 3f8:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 3fa:	d8 01       	movw	r26, r16
 3fc:	16 96       	adiw	r26, 0x06	; 6
 3fe:	8c 91       	ld	r24, X
 400:	88 23       	and	r24, r24
 402:	91 f0       	breq	.+36     	; 0x428 <can_cmd+0x288>
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	2a ef       	ldi	r18, 0xFA	; 250
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	d8 01       	movw	r26, r16
 40c:	17 96       	adiw	r26, 0x07	; 7
 40e:	ed 91       	ld	r30, X+
 410:	fc 91       	ld	r31, X
 412:	18 97       	sbiw	r26, 0x08	; 8
 414:	e8 0f       	add	r30, r24
 416:	f1 1d       	adc	r31, r1
 418:	90 81       	ld	r25, Z
 41a:	f9 01       	movw	r30, r18
 41c:	90 83       	st	Z, r25
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	16 96       	adiw	r26, 0x06	; 6
 422:	9c 91       	ld	r25, X
 424:	89 17       	cp	r24, r25
 426:	88 f3       	brcs	.-30     	; 0x40a <can_cmd+0x26a>
          cmd->ctrl.rtr=0; Can_clear_rtr();
 428:	d8 01       	movw	r26, r16
 42a:	1a 96       	adiw	r26, 0x0a	; 10
 42c:	1c 92       	st	X, r1
 42e:	1a 97       	sbiw	r26, 0x0a	; 10
 430:	e0 ef       	ldi	r30, 0xF0	; 240
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	8b 7f       	andi	r24, 0xFB	; 251
 438:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 43a:	ef ee       	ldi	r30, 0xEF	; 239
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	90 81       	ld	r25, Z
 440:	16 96       	adiw	r26, 0x06	; 6
 442:	8c 91       	ld	r24, X
 444:	89 2b       	or	r24, r25
 446:	80 83       	st	Z, r24
          Can_config_tx();
 448:	80 81       	ld	r24, Z
 44a:	8f 73       	andi	r24, 0x3F	; 63
 44c:	80 83       	st	Z, r24
 44e:	80 81       	ld	r24, Z
 450:	80 64       	ori	r24, 0x40	; 64
 452:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 454:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 456:	e7 c3       	rjmp	.+1998   	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 458:	f8 01       	movw	r30, r16
 45a:	83 85       	ldd	r24, Z+11	; 0x0b
 45c:	88 23       	and	r24, r24
 45e:	69 f1       	breq	.+90     	; 0x4ba <can_cmd+0x31a>
 460:	94 81       	ldd	r25, Z+4	; 0x04
 462:	92 95       	swap	r25
 464:	96 95       	lsr	r25
 466:	97 70       	andi	r25, 0x07	; 7
 468:	85 81       	ldd	r24, Z+5	; 0x05
 46a:	88 0f       	add	r24, r24
 46c:	88 0f       	add	r24, r24
 46e:	88 0f       	add	r24, r24
 470:	89 0f       	add	r24, r25
 472:	80 93 f3 00 	sts	0x00F3, r24
 476:	93 81       	ldd	r25, Z+3	; 0x03
 478:	92 95       	swap	r25
 47a:	96 95       	lsr	r25
 47c:	97 70       	andi	r25, 0x07	; 7
 47e:	84 81       	ldd	r24, Z+4	; 0x04
 480:	88 0f       	add	r24, r24
 482:	88 0f       	add	r24, r24
 484:	88 0f       	add	r24, r24
 486:	89 0f       	add	r24, r25
 488:	80 93 f2 00 	sts	0x00F2, r24
 48c:	92 81       	ldd	r25, Z+2	; 0x02
 48e:	92 95       	swap	r25
 490:	96 95       	lsr	r25
 492:	97 70       	andi	r25, 0x07	; 7
 494:	83 81       	ldd	r24, Z+3	; 0x03
 496:	88 0f       	add	r24, r24
 498:	88 0f       	add	r24, r24
 49a:	88 0f       	add	r24, r24
 49c:	89 0f       	add	r24, r25
 49e:	80 93 f1 00 	sts	0x00F1, r24
 4a2:	82 81       	ldd	r24, Z+2	; 0x02
 4a4:	88 0f       	add	r24, r24
 4a6:	88 0f       	add	r24, r24
 4a8:	88 0f       	add	r24, r24
 4aa:	80 93 f0 00 	sts	0x00F0, r24
 4ae:	ef ee       	ldi	r30, 0xEF	; 239
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	80 61       	ori	r24, 0x10	; 16
 4b6:	80 83       	st	Z, r24
 4b8:	17 c0       	rjmp	.+46     	; 0x4e8 <can_cmd+0x348>
          else              { Can_set_std_id(cmd->id.std);}
 4ba:	82 81       	ldd	r24, Z+2	; 0x02
 4bc:	86 95       	lsr	r24
 4be:	86 95       	lsr	r24
 4c0:	86 95       	lsr	r24
 4c2:	93 81       	ldd	r25, Z+3	; 0x03
 4c4:	b0 e2       	ldi	r27, 0x20	; 32
 4c6:	9b 9f       	mul	r25, r27
 4c8:	80 0d       	add	r24, r0
 4ca:	11 24       	eor	r1, r1
 4cc:	80 93 f3 00 	sts	0x00F3, r24
 4d0:	f8 01       	movw	r30, r16
 4d2:	82 81       	ldd	r24, Z+2	; 0x02
 4d4:	82 95       	swap	r24
 4d6:	88 0f       	add	r24, r24
 4d8:	80 7e       	andi	r24, 0xE0	; 224
 4da:	80 93 f2 00 	sts	0x00F2, r24
 4de:	ef ee       	ldi	r30, 0xEF	; 239
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	8f 7e       	andi	r24, 0xEF	; 239
 4e6:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	d8 01       	movw	r26, r16
 4ec:	1a 96       	adiw	r26, 0x0a	; 10
 4ee:	8c 93       	st	X, r24
 4f0:	1a 97       	sbiw	r26, 0x0a	; 10
 4f2:	e0 ef       	ldi	r30, 0xF0	; 240
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	84 60       	ori	r24, 0x04	; 4
 4fa:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 4fc:	ef ee       	ldi	r30, 0xEF	; 239
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	90 81       	ld	r25, Z
 502:	16 96       	adiw	r26, 0x06	; 6
 504:	8c 91       	ld	r24, X
 506:	89 2b       	or	r24, r25
 508:	80 83       	st	Z, r24
          Can_config_tx();
 50a:	80 81       	ld	r24, Z
 50c:	8f 73       	andi	r24, 0x3F	; 63
 50e:	80 83       	st	Z, r24
 510:	80 81       	ld	r24, Z
 512:	80 64       	ori	r24, 0x40	; 64
 514:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 516:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 518:	86 c3       	rjmp	.+1804   	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 51a:	19 82       	std	Y+1, r1	; 0x01
 51c:	1a 82       	std	Y+2, r1	; 0x02
 51e:	1b 82       	std	Y+3, r1	; 0x03
 520:	1c 82       	std	Y+4, r1	; 0x04
 522:	10 92 f7 00 	sts	0x00F7, r1
 526:	9a 81       	ldd	r25, Y+2	; 0x02
 528:	92 95       	swap	r25
 52a:	96 95       	lsr	r25
 52c:	97 70       	andi	r25, 0x07	; 7
 52e:	8b 81       	ldd	r24, Y+3	; 0x03
 530:	88 0f       	add	r24, r24
 532:	88 0f       	add	r24, r24
 534:	88 0f       	add	r24, r24
 536:	89 0f       	add	r24, r25
 538:	80 93 f6 00 	sts	0x00F6, r24
 53c:	99 81       	ldd	r25, Y+1	; 0x01
 53e:	92 95       	swap	r25
 540:	96 95       	lsr	r25
 542:	97 70       	andi	r25, 0x07	; 7
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	88 0f       	add	r24, r24
 548:	88 0f       	add	r24, r24
 54a:	88 0f       	add	r24, r24
 54c:	89 0f       	add	r24, r25
 54e:	80 93 f5 00 	sts	0x00F5, r24
 552:	89 81       	ldd	r24, Y+1	; 0x01
 554:	88 0f       	add	r24, r24
 556:	88 0f       	add	r24, r24
 558:	88 0f       	add	r24, r24
 55a:	24 ef       	ldi	r18, 0xF4	; 244
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	f9 01       	movw	r30, r18
 560:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 562:	ef ee       	ldi	r30, 0xEF	; 239
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	90 81       	ld	r25, Z
 568:	d8 01       	movw	r26, r16
 56a:	16 96       	adiw	r26, 0x06	; 6
 56c:	8c 91       	ld	r24, X
 56e:	89 2b       	or	r24, r25
 570:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 572:	d9 01       	movw	r26, r18
 574:	8c 91       	ld	r24, X
 576:	8b 7f       	andi	r24, 0xFB	; 251
 578:	8c 93       	st	X, r24
          Can_clear_idemsk();
 57a:	8c 91       	ld	r24, X
 57c:	8e 7f       	andi	r24, 0xFE	; 254
 57e:	8c 93       	st	X, r24
          Can_config_rx();       
 580:	80 81       	ld	r24, Z
 582:	8f 73       	andi	r24, 0x3F	; 63
 584:	80 83       	st	Z, r24
 586:	80 81       	ld	r24, Z
 588:	80 68       	ori	r24, 0x80	; 128
 58a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 58c:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 58e:	4b c3       	rjmp	.+1686   	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 590:	19 82       	std	Y+1, r1	; 0x01
 592:	1a 82       	std	Y+2, r1	; 0x02
 594:	1b 82       	std	Y+3, r1	; 0x03
 596:	1c 82       	std	Y+4, r1	; 0x04
 598:	10 92 f7 00 	sts	0x00F7, r1
 59c:	9a 81       	ldd	r25, Y+2	; 0x02
 59e:	92 95       	swap	r25
 5a0:	96 95       	lsr	r25
 5a2:	97 70       	andi	r25, 0x07	; 7
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	88 0f       	add	r24, r24
 5a8:	88 0f       	add	r24, r24
 5aa:	88 0f       	add	r24, r24
 5ac:	89 0f       	add	r24, r25
 5ae:	80 93 f6 00 	sts	0x00F6, r24
 5b2:	99 81       	ldd	r25, Y+1	; 0x01
 5b4:	92 95       	swap	r25
 5b6:	96 95       	lsr	r25
 5b8:	97 70       	andi	r25, 0x07	; 7
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	88 0f       	add	r24, r24
 5be:	88 0f       	add	r24, r24
 5c0:	88 0f       	add	r24, r24
 5c2:	89 0f       	add	r24, r25
 5c4:	80 93 f5 00 	sts	0x00F5, r24
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	88 0f       	add	r24, r24
 5cc:	88 0f       	add	r24, r24
 5ce:	88 0f       	add	r24, r24
 5d0:	44 ef       	ldi	r20, 0xF4	; 244
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	fa 01       	movw	r30, r20
 5d6:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 5d8:	ef ee       	ldi	r30, 0xEF	; 239
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	90 81       	ld	r25, Z
 5de:	d8 01       	movw	r26, r16
 5e0:	16 96       	adiw	r26, 0x06	; 6
 5e2:	8c 91       	ld	r24, X
 5e4:	16 97       	sbiw	r26, 0x06	; 6
 5e6:	89 2b       	or	r24, r25
 5e8:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 5ea:	1a 96       	adiw	r26, 0x0a	; 10
 5ec:	1c 92       	st	X, r1
 5ee:	da 01       	movw	r26, r20
 5f0:	8c 91       	ld	r24, X
 5f2:	84 60       	ori	r24, 0x04	; 4
 5f4:	8c 93       	st	X, r24
 5f6:	80 ef       	ldi	r24, 0xF0	; 240
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	dc 01       	movw	r26, r24
 5fc:	2c 91       	ld	r18, X
 5fe:	2b 7f       	andi	r18, 0xFB	; 251
 600:	2c 93       	st	X, r18
          Can_clear_idemsk();
 602:	da 01       	movw	r26, r20
 604:	8c 91       	ld	r24, X
 606:	8e 7f       	andi	r24, 0xFE	; 254
 608:	8c 93       	st	X, r24
          Can_config_rx();       
 60a:	80 81       	ld	r24, Z
 60c:	8f 73       	andi	r24, 0x3F	; 63
 60e:	80 83       	st	Z, r24
 610:	80 81       	ld	r24, Z
 612:	80 68       	ori	r24, 0x80	; 128
 614:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 616:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 618:	06 c3       	rjmp	.+1548   	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 61a:	19 82       	std	Y+1, r1	; 0x01
 61c:	1a 82       	std	Y+2, r1	; 0x02
 61e:	1b 82       	std	Y+3, r1	; 0x03
 620:	1c 82       	std	Y+4, r1	; 0x04
 622:	10 92 f7 00 	sts	0x00F7, r1
 626:	9a 81       	ldd	r25, Y+2	; 0x02
 628:	92 95       	swap	r25
 62a:	96 95       	lsr	r25
 62c:	97 70       	andi	r25, 0x07	; 7
 62e:	8b 81       	ldd	r24, Y+3	; 0x03
 630:	88 0f       	add	r24, r24
 632:	88 0f       	add	r24, r24
 634:	88 0f       	add	r24, r24
 636:	89 0f       	add	r24, r25
 638:	80 93 f6 00 	sts	0x00F6, r24
 63c:	99 81       	ldd	r25, Y+1	; 0x01
 63e:	92 95       	swap	r25
 640:	96 95       	lsr	r25
 642:	97 70       	andi	r25, 0x07	; 7
 644:	8a 81       	ldd	r24, Y+2	; 0x02
 646:	88 0f       	add	r24, r24
 648:	88 0f       	add	r24, r24
 64a:	88 0f       	add	r24, r24
 64c:	89 0f       	add	r24, r25
 64e:	80 93 f5 00 	sts	0x00F5, r24
 652:	89 81       	ldd	r24, Y+1	; 0x01
 654:	88 0f       	add	r24, r24
 656:	88 0f       	add	r24, r24
 658:	88 0f       	add	r24, r24
 65a:	44 ef       	ldi	r20, 0xF4	; 244
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	fa 01       	movw	r30, r20
 660:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 662:	ef ee       	ldi	r30, 0xEF	; 239
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	90 81       	ld	r25, Z
 668:	d8 01       	movw	r26, r16
 66a:	16 96       	adiw	r26, 0x06	; 6
 66c:	8c 91       	ld	r24, X
 66e:	16 97       	sbiw	r26, 0x06	; 6
 670:	89 2b       	or	r24, r25
 672:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	1a 96       	adiw	r26, 0x0a	; 10
 678:	8c 93       	st	X, r24
 67a:	da 01       	movw	r26, r20
 67c:	8c 91       	ld	r24, X
 67e:	84 60       	ori	r24, 0x04	; 4
 680:	8c 93       	st	X, r24
 682:	80 ef       	ldi	r24, 0xF0	; 240
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	dc 01       	movw	r26, r24
 688:	2c 91       	ld	r18, X
 68a:	24 60       	ori	r18, 0x04	; 4
 68c:	2c 93       	st	X, r18
          Can_clear_rplv();
 68e:	80 81       	ld	r24, Z
 690:	8f 7d       	andi	r24, 0xDF	; 223
 692:	80 83       	st	Z, r24
          Can_clear_idemsk();
 694:	da 01       	movw	r26, r20
 696:	8c 91       	ld	r24, X
 698:	8e 7f       	andi	r24, 0xFE	; 254
 69a:	8c 93       	st	X, r24
          Can_config_rx();       
 69c:	80 81       	ld	r24, Z
 69e:	8f 73       	andi	r24, 0x3F	; 63
 6a0:	80 83       	st	Z, r24
 6a2:	80 81       	ld	r24, Z
 6a4:	80 68       	ori	r24, 0x80	; 128
 6a6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 6a8:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 6aa:	bd c2       	rjmp	.+1402   	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 6ac:	f8 01       	movw	r30, r16
 6ae:	83 85       	ldd	r24, Z+11	; 0x0b
 6b0:	88 23       	and	r24, r24
 6b2:	69 f1       	breq	.+90     	; 0x70e <can_cmd+0x56e>
 6b4:	94 81       	ldd	r25, Z+4	; 0x04
 6b6:	92 95       	swap	r25
 6b8:	96 95       	lsr	r25
 6ba:	97 70       	andi	r25, 0x07	; 7
 6bc:	85 81       	ldd	r24, Z+5	; 0x05
 6be:	88 0f       	add	r24, r24
 6c0:	88 0f       	add	r24, r24
 6c2:	88 0f       	add	r24, r24
 6c4:	89 0f       	add	r24, r25
 6c6:	80 93 f3 00 	sts	0x00F3, r24
 6ca:	93 81       	ldd	r25, Z+3	; 0x03
 6cc:	92 95       	swap	r25
 6ce:	96 95       	lsr	r25
 6d0:	97 70       	andi	r25, 0x07	; 7
 6d2:	84 81       	ldd	r24, Z+4	; 0x04
 6d4:	88 0f       	add	r24, r24
 6d6:	88 0f       	add	r24, r24
 6d8:	88 0f       	add	r24, r24
 6da:	89 0f       	add	r24, r25
 6dc:	80 93 f2 00 	sts	0x00F2, r24
 6e0:	92 81       	ldd	r25, Z+2	; 0x02
 6e2:	92 95       	swap	r25
 6e4:	96 95       	lsr	r25
 6e6:	97 70       	andi	r25, 0x07	; 7
 6e8:	83 81       	ldd	r24, Z+3	; 0x03
 6ea:	88 0f       	add	r24, r24
 6ec:	88 0f       	add	r24, r24
 6ee:	88 0f       	add	r24, r24
 6f0:	89 0f       	add	r24, r25
 6f2:	80 93 f1 00 	sts	0x00F1, r24
 6f6:	82 81       	ldd	r24, Z+2	; 0x02
 6f8:	88 0f       	add	r24, r24
 6fa:	88 0f       	add	r24, r24
 6fc:	88 0f       	add	r24, r24
 6fe:	80 93 f0 00 	sts	0x00F0, r24
 702:	ef ee       	ldi	r30, 0xEF	; 239
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	80 61       	ori	r24, 0x10	; 16
 70a:	80 83       	st	Z, r24
 70c:	17 c0       	rjmp	.+46     	; 0x73c <can_cmd+0x59c>
          else              { Can_set_std_id(cmd->id.std);}
 70e:	82 81       	ldd	r24, Z+2	; 0x02
 710:	86 95       	lsr	r24
 712:	86 95       	lsr	r24
 714:	86 95       	lsr	r24
 716:	93 81       	ldd	r25, Z+3	; 0x03
 718:	b0 e2       	ldi	r27, 0x20	; 32
 71a:	9b 9f       	mul	r25, r27
 71c:	80 0d       	add	r24, r0
 71e:	11 24       	eor	r1, r1
 720:	80 93 f3 00 	sts	0x00F3, r24
 724:	f8 01       	movw	r30, r16
 726:	82 81       	ldd	r24, Z+2	; 0x02
 728:	82 95       	swap	r24
 72a:	88 0f       	add	r24, r24
 72c:	80 7e       	andi	r24, 0xE0	; 224
 72e:	80 93 f2 00 	sts	0x00F2, r24
 732:	ef ee       	ldi	r30, 0xEF	; 239
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	8f 7e       	andi	r24, 0xEF	; 239
 73a:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 73c:	8f ef       	ldi	r24, 0xFF	; 255
 73e:	9f ef       	ldi	r25, 0xFF	; 255
 740:	dc 01       	movw	r26, r24
 742:	89 83       	std	Y+1, r24	; 0x01
 744:	9a 83       	std	Y+2, r25	; 0x02
 746:	ab 83       	std	Y+3, r26	; 0x03
 748:	bc 83       	std	Y+4, r27	; 0x04
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	80 93 f7 00 	sts	0x00F7, r24
 750:	9a 81       	ldd	r25, Y+2	; 0x02
 752:	92 95       	swap	r25
 754:	96 95       	lsr	r25
 756:	97 70       	andi	r25, 0x07	; 7
 758:	8b 81       	ldd	r24, Y+3	; 0x03
 75a:	88 0f       	add	r24, r24
 75c:	88 0f       	add	r24, r24
 75e:	88 0f       	add	r24, r24
 760:	89 0f       	add	r24, r25
 762:	80 93 f6 00 	sts	0x00F6, r24
 766:	99 81       	ldd	r25, Y+1	; 0x01
 768:	92 95       	swap	r25
 76a:	96 95       	lsr	r25
 76c:	97 70       	andi	r25, 0x07	; 7
 76e:	8a 81       	ldd	r24, Y+2	; 0x02
 770:	88 0f       	add	r24, r24
 772:	88 0f       	add	r24, r24
 774:	88 0f       	add	r24, r24
 776:	89 0f       	add	r24, r25
 778:	80 93 f5 00 	sts	0x00F5, r24
 77c:	89 81       	ldd	r24, Y+1	; 0x01
 77e:	88 0f       	add	r24, r24
 780:	88 0f       	add	r24, r24
 782:	88 0f       	add	r24, r24
 784:	24 ef       	ldi	r18, 0xF4	; 244
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	d9 01       	movw	r26, r18
 78a:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 78c:	ef ee       	ldi	r30, 0xEF	; 239
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	90 81       	ld	r25, Z
 792:	d8 01       	movw	r26, r16
 794:	16 96       	adiw	r26, 0x06	; 6
 796:	8c 91       	ld	r24, X
 798:	89 2b       	or	r24, r25
 79a:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 79c:	d9 01       	movw	r26, r18
 79e:	8c 91       	ld	r24, X
 7a0:	8b 7f       	andi	r24, 0xFB	; 251
 7a2:	8c 93       	st	X, r24
          Can_set_idemsk();
 7a4:	8c 91       	ld	r24, X
 7a6:	81 60       	ori	r24, 0x01	; 1
 7a8:	8c 93       	st	X, r24
          Can_config_rx();       
 7aa:	80 81       	ld	r24, Z
 7ac:	8f 73       	andi	r24, 0x3F	; 63
 7ae:	80 83       	st	Z, r24
 7b0:	80 81       	ld	r24, Z
 7b2:	80 68       	ori	r24, 0x80	; 128
 7b4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 7b6:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 7b8:	36 c2       	rjmp	.+1132   	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 7ba:	f8 01       	movw	r30, r16
 7bc:	83 85       	ldd	r24, Z+11	; 0x0b
 7be:	88 23       	and	r24, r24
 7c0:	69 f1       	breq	.+90     	; 0x81c <can_cmd+0x67c>
 7c2:	94 81       	ldd	r25, Z+4	; 0x04
 7c4:	92 95       	swap	r25
 7c6:	96 95       	lsr	r25
 7c8:	97 70       	andi	r25, 0x07	; 7
 7ca:	85 81       	ldd	r24, Z+5	; 0x05
 7cc:	88 0f       	add	r24, r24
 7ce:	88 0f       	add	r24, r24
 7d0:	88 0f       	add	r24, r24
 7d2:	89 0f       	add	r24, r25
 7d4:	80 93 f3 00 	sts	0x00F3, r24
 7d8:	93 81       	ldd	r25, Z+3	; 0x03
 7da:	92 95       	swap	r25
 7dc:	96 95       	lsr	r25
 7de:	97 70       	andi	r25, 0x07	; 7
 7e0:	84 81       	ldd	r24, Z+4	; 0x04
 7e2:	88 0f       	add	r24, r24
 7e4:	88 0f       	add	r24, r24
 7e6:	88 0f       	add	r24, r24
 7e8:	89 0f       	add	r24, r25
 7ea:	80 93 f2 00 	sts	0x00F2, r24
 7ee:	92 81       	ldd	r25, Z+2	; 0x02
 7f0:	92 95       	swap	r25
 7f2:	96 95       	lsr	r25
 7f4:	97 70       	andi	r25, 0x07	; 7
 7f6:	83 81       	ldd	r24, Z+3	; 0x03
 7f8:	88 0f       	add	r24, r24
 7fa:	88 0f       	add	r24, r24
 7fc:	88 0f       	add	r24, r24
 7fe:	89 0f       	add	r24, r25
 800:	80 93 f1 00 	sts	0x00F1, r24
 804:	82 81       	ldd	r24, Z+2	; 0x02
 806:	88 0f       	add	r24, r24
 808:	88 0f       	add	r24, r24
 80a:	88 0f       	add	r24, r24
 80c:	80 93 f0 00 	sts	0x00F0, r24
 810:	ef ee       	ldi	r30, 0xEF	; 239
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	80 61       	ori	r24, 0x10	; 16
 818:	80 83       	st	Z, r24
 81a:	17 c0       	rjmp	.+46     	; 0x84a <can_cmd+0x6aa>
          else              { Can_set_std_id(cmd->id.std);}
 81c:	82 81       	ldd	r24, Z+2	; 0x02
 81e:	86 95       	lsr	r24
 820:	86 95       	lsr	r24
 822:	86 95       	lsr	r24
 824:	93 81       	ldd	r25, Z+3	; 0x03
 826:	b0 e2       	ldi	r27, 0x20	; 32
 828:	9b 9f       	mul	r25, r27
 82a:	80 0d       	add	r24, r0
 82c:	11 24       	eor	r1, r1
 82e:	80 93 f3 00 	sts	0x00F3, r24
 832:	f8 01       	movw	r30, r16
 834:	82 81       	ldd	r24, Z+2	; 0x02
 836:	82 95       	swap	r24
 838:	88 0f       	add	r24, r24
 83a:	80 7e       	andi	r24, 0xE0	; 224
 83c:	80 93 f2 00 	sts	0x00F2, r24
 840:	ef ee       	ldi	r30, 0xEF	; 239
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	8f 7e       	andi	r24, 0xEF	; 239
 848:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 84a:	8f ef       	ldi	r24, 0xFF	; 255
 84c:	9f ef       	ldi	r25, 0xFF	; 255
 84e:	dc 01       	movw	r26, r24
 850:	89 83       	std	Y+1, r24	; 0x01
 852:	9a 83       	std	Y+2, r25	; 0x02
 854:	ab 83       	std	Y+3, r26	; 0x03
 856:	bc 83       	std	Y+4, r27	; 0x04
 858:	8f ef       	ldi	r24, 0xFF	; 255
 85a:	80 93 f7 00 	sts	0x00F7, r24
 85e:	9a 81       	ldd	r25, Y+2	; 0x02
 860:	92 95       	swap	r25
 862:	96 95       	lsr	r25
 864:	97 70       	andi	r25, 0x07	; 7
 866:	8b 81       	ldd	r24, Y+3	; 0x03
 868:	88 0f       	add	r24, r24
 86a:	88 0f       	add	r24, r24
 86c:	88 0f       	add	r24, r24
 86e:	89 0f       	add	r24, r25
 870:	80 93 f6 00 	sts	0x00F6, r24
 874:	99 81       	ldd	r25, Y+1	; 0x01
 876:	92 95       	swap	r25
 878:	96 95       	lsr	r25
 87a:	97 70       	andi	r25, 0x07	; 7
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
 87e:	88 0f       	add	r24, r24
 880:	88 0f       	add	r24, r24
 882:	88 0f       	add	r24, r24
 884:	89 0f       	add	r24, r25
 886:	80 93 f5 00 	sts	0x00F5, r24
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	88 0f       	add	r24, r24
 88e:	88 0f       	add	r24, r24
 890:	88 0f       	add	r24, r24
 892:	44 ef       	ldi	r20, 0xF4	; 244
 894:	50 e0       	ldi	r21, 0x00	; 0
 896:	da 01       	movw	r26, r20
 898:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 89a:	ef ee       	ldi	r30, 0xEF	; 239
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	90 81       	ld	r25, Z
 8a0:	d8 01       	movw	r26, r16
 8a2:	16 96       	adiw	r26, 0x06	; 6
 8a4:	8c 91       	ld	r24, X
 8a6:	16 97       	sbiw	r26, 0x06	; 6
 8a8:	89 2b       	or	r24, r25
 8aa:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 8ac:	1a 96       	adiw	r26, 0x0a	; 10
 8ae:	1c 92       	st	X, r1
 8b0:	da 01       	movw	r26, r20
 8b2:	8c 91       	ld	r24, X
 8b4:	84 60       	ori	r24, 0x04	; 4
 8b6:	8c 93       	st	X, r24
 8b8:	80 ef       	ldi	r24, 0xF0	; 240
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	dc 01       	movw	r26, r24
 8be:	2c 91       	ld	r18, X
 8c0:	2b 7f       	andi	r18, 0xFB	; 251
 8c2:	2c 93       	st	X, r18
          Can_set_idemsk();
 8c4:	da 01       	movw	r26, r20
 8c6:	8c 91       	ld	r24, X
 8c8:	81 60       	ori	r24, 0x01	; 1
 8ca:	8c 93       	st	X, r24
          Can_config_rx();       
 8cc:	80 81       	ld	r24, Z
 8ce:	8f 73       	andi	r24, 0x3F	; 63
 8d0:	80 83       	st	Z, r24
 8d2:	80 81       	ld	r24, Z
 8d4:	80 68       	ori	r24, 0x80	; 128
 8d6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 8d8:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 8da:	a5 c1       	rjmp	.+842    	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 8dc:	f8 01       	movw	r30, r16
 8de:	83 85       	ldd	r24, Z+11	; 0x0b
 8e0:	88 23       	and	r24, r24
 8e2:	69 f1       	breq	.+90     	; 0x93e <__stack+0x3f>
 8e4:	94 81       	ldd	r25, Z+4	; 0x04
 8e6:	92 95       	swap	r25
 8e8:	96 95       	lsr	r25
 8ea:	97 70       	andi	r25, 0x07	; 7
 8ec:	85 81       	ldd	r24, Z+5	; 0x05
 8ee:	88 0f       	add	r24, r24
 8f0:	88 0f       	add	r24, r24
 8f2:	88 0f       	add	r24, r24
 8f4:	89 0f       	add	r24, r25
 8f6:	80 93 f3 00 	sts	0x00F3, r24
 8fa:	93 81       	ldd	r25, Z+3	; 0x03
 8fc:	92 95       	swap	r25
 8fe:	96 95       	lsr	r25
 900:	97 70       	andi	r25, 0x07	; 7
 902:	84 81       	ldd	r24, Z+4	; 0x04
 904:	88 0f       	add	r24, r24
 906:	88 0f       	add	r24, r24
 908:	88 0f       	add	r24, r24
 90a:	89 0f       	add	r24, r25
 90c:	80 93 f2 00 	sts	0x00F2, r24
 910:	92 81       	ldd	r25, Z+2	; 0x02
 912:	92 95       	swap	r25
 914:	96 95       	lsr	r25
 916:	97 70       	andi	r25, 0x07	; 7
 918:	83 81       	ldd	r24, Z+3	; 0x03
 91a:	88 0f       	add	r24, r24
 91c:	88 0f       	add	r24, r24
 91e:	88 0f       	add	r24, r24
 920:	89 0f       	add	r24, r25
 922:	80 93 f1 00 	sts	0x00F1, r24
 926:	82 81       	ldd	r24, Z+2	; 0x02
 928:	88 0f       	add	r24, r24
 92a:	88 0f       	add	r24, r24
 92c:	88 0f       	add	r24, r24
 92e:	80 93 f0 00 	sts	0x00F0, r24
 932:	ef ee       	ldi	r30, 0xEF	; 239
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	80 81       	ld	r24, Z
 938:	80 61       	ori	r24, 0x10	; 16
 93a:	80 83       	st	Z, r24
 93c:	17 c0       	rjmp	.+46     	; 0x96c <__stack+0x6d>
          else              { Can_set_std_id(cmd->id.std);}
 93e:	82 81       	ldd	r24, Z+2	; 0x02
 940:	86 95       	lsr	r24
 942:	86 95       	lsr	r24
 944:	86 95       	lsr	r24
 946:	93 81       	ldd	r25, Z+3	; 0x03
 948:	b0 e2       	ldi	r27, 0x20	; 32
 94a:	9b 9f       	mul	r25, r27
 94c:	80 0d       	add	r24, r0
 94e:	11 24       	eor	r1, r1
 950:	80 93 f3 00 	sts	0x00F3, r24
 954:	f8 01       	movw	r30, r16
 956:	82 81       	ldd	r24, Z+2	; 0x02
 958:	82 95       	swap	r24
 95a:	88 0f       	add	r24, r24
 95c:	80 7e       	andi	r24, 0xE0	; 224
 95e:	80 93 f2 00 	sts	0x00F2, r24
 962:	ef ee       	ldi	r30, 0xEF	; 239
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	8f 7e       	andi	r24, 0xEF	; 239
 96a:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 96c:	8f ef       	ldi	r24, 0xFF	; 255
 96e:	9f ef       	ldi	r25, 0xFF	; 255
 970:	dc 01       	movw	r26, r24
 972:	89 83       	std	Y+1, r24	; 0x01
 974:	9a 83       	std	Y+2, r25	; 0x02
 976:	ab 83       	std	Y+3, r26	; 0x03
 978:	bc 83       	std	Y+4, r27	; 0x04
 97a:	8f ef       	ldi	r24, 0xFF	; 255
 97c:	80 93 f7 00 	sts	0x00F7, r24
 980:	9a 81       	ldd	r25, Y+2	; 0x02
 982:	92 95       	swap	r25
 984:	96 95       	lsr	r25
 986:	97 70       	andi	r25, 0x07	; 7
 988:	8b 81       	ldd	r24, Y+3	; 0x03
 98a:	88 0f       	add	r24, r24
 98c:	88 0f       	add	r24, r24
 98e:	88 0f       	add	r24, r24
 990:	89 0f       	add	r24, r25
 992:	80 93 f6 00 	sts	0x00F6, r24
 996:	99 81       	ldd	r25, Y+1	; 0x01
 998:	92 95       	swap	r25
 99a:	96 95       	lsr	r25
 99c:	97 70       	andi	r25, 0x07	; 7
 99e:	8a 81       	ldd	r24, Y+2	; 0x02
 9a0:	88 0f       	add	r24, r24
 9a2:	88 0f       	add	r24, r24
 9a4:	88 0f       	add	r24, r24
 9a6:	89 0f       	add	r24, r25
 9a8:	80 93 f5 00 	sts	0x00F5, r24
 9ac:	89 81       	ldd	r24, Y+1	; 0x01
 9ae:	88 0f       	add	r24, r24
 9b0:	88 0f       	add	r24, r24
 9b2:	88 0f       	add	r24, r24
 9b4:	44 ef       	ldi	r20, 0xF4	; 244
 9b6:	50 e0       	ldi	r21, 0x00	; 0
 9b8:	da 01       	movw	r26, r20
 9ba:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 9bc:	ef ee       	ldi	r30, 0xEF	; 239
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	90 81       	ld	r25, Z
 9c2:	d8 01       	movw	r26, r16
 9c4:	16 96       	adiw	r26, 0x06	; 6
 9c6:	8c 91       	ld	r24, X
 9c8:	16 97       	sbiw	r26, 0x06	; 6
 9ca:	89 2b       	or	r24, r25
 9cc:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	1a 96       	adiw	r26, 0x0a	; 10
 9d2:	8c 93       	st	X, r24
 9d4:	da 01       	movw	r26, r20
 9d6:	8c 91       	ld	r24, X
 9d8:	84 60       	ori	r24, 0x04	; 4
 9da:	8c 93       	st	X, r24
 9dc:	80 ef       	ldi	r24, 0xF0	; 240
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	dc 01       	movw	r26, r24
 9e2:	2c 91       	ld	r18, X
 9e4:	24 60       	ori	r18, 0x04	; 4
 9e6:	2c 93       	st	X, r18
          Can_clear_rplv();
 9e8:	80 81       	ld	r24, Z
 9ea:	8f 7d       	andi	r24, 0xDF	; 223
 9ec:	80 83       	st	Z, r24
          Can_set_idemsk();
 9ee:	da 01       	movw	r26, r20
 9f0:	8c 91       	ld	r24, X
 9f2:	81 60       	ori	r24, 0x01	; 1
 9f4:	8c 93       	st	X, r24
          Can_config_rx();       
 9f6:	80 81       	ld	r24, Z
 9f8:	8f 73       	andi	r24, 0x3F	; 63
 9fa:	80 83       	st	Z, r24
 9fc:	80 81       	ld	r24, Z
 9fe:	80 68       	ori	r24, 0x80	; 128
 a00:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 a02:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 a04:	10 c1       	rjmp	.+544    	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	2a ef       	ldi	r18, 0xFA	; 250
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	d8 01       	movw	r26, r16
 a0e:	17 96       	adiw	r26, 0x07	; 7
 a10:	ed 91       	ld	r30, X+
 a12:	fc 91       	ld	r31, X
 a14:	18 97       	sbiw	r26, 0x08	; 8
 a16:	e8 0f       	add	r30, r24
 a18:	f1 1d       	adc	r31, r1
 a1a:	90 81       	ld	r25, Z
 a1c:	f9 01       	movw	r30, r18
 a1e:	90 83       	st	Z, r25
 a20:	8f 5f       	subi	r24, 0xFF	; 255
 a22:	16 96       	adiw	r26, 0x06	; 6
 a24:	9c 91       	ld	r25, X
 a26:	89 17       	cp	r24, r25
 a28:	88 f3       	brcs	.-30     	; 0xa0c <__stack+0x10d>
          u32_temp=0; Can_set_ext_msk(u32_temp);
 a2a:	19 82       	std	Y+1, r1	; 0x01
 a2c:	1a 82       	std	Y+2, r1	; 0x02
 a2e:	1b 82       	std	Y+3, r1	; 0x03
 a30:	1c 82       	std	Y+4, r1	; 0x04
 a32:	10 92 f7 00 	sts	0x00F7, r1
 a36:	9a 81       	ldd	r25, Y+2	; 0x02
 a38:	92 95       	swap	r25
 a3a:	96 95       	lsr	r25
 a3c:	97 70       	andi	r25, 0x07	; 7
 a3e:	8b 81       	ldd	r24, Y+3	; 0x03
 a40:	88 0f       	add	r24, r24
 a42:	88 0f       	add	r24, r24
 a44:	88 0f       	add	r24, r24
 a46:	89 0f       	add	r24, r25
 a48:	80 93 f6 00 	sts	0x00F6, r24
 a4c:	99 81       	ldd	r25, Y+1	; 0x01
 a4e:	92 95       	swap	r25
 a50:	96 95       	lsr	r25
 a52:	97 70       	andi	r25, 0x07	; 7
 a54:	8a 81       	ldd	r24, Y+2	; 0x02
 a56:	88 0f       	add	r24, r24
 a58:	88 0f       	add	r24, r24
 a5a:	88 0f       	add	r24, r24
 a5c:	89 0f       	add	r24, r25
 a5e:	80 93 f5 00 	sts	0x00F5, r24
 a62:	89 81       	ldd	r24, Y+1	; 0x01
 a64:	88 0f       	add	r24, r24
 a66:	88 0f       	add	r24, r24
 a68:	88 0f       	add	r24, r24
 a6a:	44 ef       	ldi	r20, 0xF4	; 244
 a6c:	50 e0       	ldi	r21, 0x00	; 0
 a6e:	da 01       	movw	r26, r20
 a70:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 a72:	ef ee       	ldi	r30, 0xEF	; 239
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	90 81       	ld	r25, Z
 a78:	d8 01       	movw	r26, r16
 a7a:	16 96       	adiw	r26, 0x06	; 6
 a7c:	8c 91       	ld	r24, X
 a7e:	16 97       	sbiw	r26, 0x06	; 6
 a80:	89 2b       	or	r24, r25
 a82:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	1a 96       	adiw	r26, 0x0a	; 10
 a88:	8c 93       	st	X, r24
 a8a:	da 01       	movw	r26, r20
 a8c:	8c 91       	ld	r24, X
 a8e:	84 60       	ori	r24, 0x04	; 4
 a90:	8c 93       	st	X, r24
 a92:	80 ef       	ldi	r24, 0xF0	; 240
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	dc 01       	movw	r26, r24
 a98:	2c 91       	ld	r18, X
 a9a:	24 60       	ori	r18, 0x04	; 4
 a9c:	2c 93       	st	X, r18
          Can_set_rplv();
 a9e:	80 81       	ld	r24, Z
 aa0:	80 62       	ori	r24, 0x20	; 32
 aa2:	80 83       	st	Z, r24
          Can_clear_idemsk();
 aa4:	da 01       	movw	r26, r20
 aa6:	8c 91       	ld	r24, X
 aa8:	8e 7f       	andi	r24, 0xFE	; 254
 aaa:	8c 93       	st	X, r24
          Can_config_rx();       
 aac:	80 81       	ld	r24, Z
 aae:	8f 73       	andi	r24, 0x3F	; 63
 ab0:	80 83       	st	Z, r24
 ab2:	80 81       	ld	r24, Z
 ab4:	80 68       	ori	r24, 0x80	; 128
 ab6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 ab8:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 aba:	b5 c0       	rjmp	.+362    	; 0xc26 <__stack+0x327>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 abc:	f8 01       	movw	r30, r16
 abe:	83 85       	ldd	r24, Z+11	; 0x0b
 ac0:	88 23       	and	r24, r24
 ac2:	69 f1       	breq	.+90     	; 0xb1e <__stack+0x21f>
 ac4:	94 81       	ldd	r25, Z+4	; 0x04
 ac6:	92 95       	swap	r25
 ac8:	96 95       	lsr	r25
 aca:	97 70       	andi	r25, 0x07	; 7
 acc:	85 81       	ldd	r24, Z+5	; 0x05
 ace:	88 0f       	add	r24, r24
 ad0:	88 0f       	add	r24, r24
 ad2:	88 0f       	add	r24, r24
 ad4:	89 0f       	add	r24, r25
 ad6:	80 93 f3 00 	sts	0x00F3, r24
 ada:	93 81       	ldd	r25, Z+3	; 0x03
 adc:	92 95       	swap	r25
 ade:	96 95       	lsr	r25
 ae0:	97 70       	andi	r25, 0x07	; 7
 ae2:	84 81       	ldd	r24, Z+4	; 0x04
 ae4:	88 0f       	add	r24, r24
 ae6:	88 0f       	add	r24, r24
 ae8:	88 0f       	add	r24, r24
 aea:	89 0f       	add	r24, r25
 aec:	80 93 f2 00 	sts	0x00F2, r24
 af0:	92 81       	ldd	r25, Z+2	; 0x02
 af2:	92 95       	swap	r25
 af4:	96 95       	lsr	r25
 af6:	97 70       	andi	r25, 0x07	; 7
 af8:	83 81       	ldd	r24, Z+3	; 0x03
 afa:	88 0f       	add	r24, r24
 afc:	88 0f       	add	r24, r24
 afe:	88 0f       	add	r24, r24
 b00:	89 0f       	add	r24, r25
 b02:	80 93 f1 00 	sts	0x00F1, r24
 b06:	82 81       	ldd	r24, Z+2	; 0x02
 b08:	88 0f       	add	r24, r24
 b0a:	88 0f       	add	r24, r24
 b0c:	88 0f       	add	r24, r24
 b0e:	80 93 f0 00 	sts	0x00F0, r24
 b12:	ef ee       	ldi	r30, 0xEF	; 239
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	80 61       	ori	r24, 0x10	; 16
 b1a:	80 83       	st	Z, r24
 b1c:	17 c0       	rjmp	.+46     	; 0xb4c <__stack+0x24d>
          else              { Can_set_std_id(cmd->id.std);}
 b1e:	82 81       	ldd	r24, Z+2	; 0x02
 b20:	86 95       	lsr	r24
 b22:	86 95       	lsr	r24
 b24:	86 95       	lsr	r24
 b26:	93 81       	ldd	r25, Z+3	; 0x03
 b28:	b0 e2       	ldi	r27, 0x20	; 32
 b2a:	9b 9f       	mul	r25, r27
 b2c:	80 0d       	add	r24, r0
 b2e:	11 24       	eor	r1, r1
 b30:	80 93 f3 00 	sts	0x00F3, r24
 b34:	f8 01       	movw	r30, r16
 b36:	82 81       	ldd	r24, Z+2	; 0x02
 b38:	82 95       	swap	r24
 b3a:	88 0f       	add	r24, r24
 b3c:	80 7e       	andi	r24, 0xE0	; 224
 b3e:	80 93 f2 00 	sts	0x00F2, r24
 b42:	ef ee       	ldi	r30, 0xEF	; 239
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	80 81       	ld	r24, Z
 b48:	8f 7e       	andi	r24, 0xEF	; 239
 b4a:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 b4c:	d8 01       	movw	r26, r16
 b4e:	16 96       	adiw	r26, 0x06	; 6
 b50:	8c 91       	ld	r24, X
 b52:	88 23       	and	r24, r24
 b54:	91 f0       	breq	.+36     	; 0xb7a <__stack+0x27b>
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	2a ef       	ldi	r18, 0xFA	; 250
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	d8 01       	movw	r26, r16
 b5e:	17 96       	adiw	r26, 0x07	; 7
 b60:	ed 91       	ld	r30, X+
 b62:	fc 91       	ld	r31, X
 b64:	18 97       	sbiw	r26, 0x08	; 8
 b66:	e8 0f       	add	r30, r24
 b68:	f1 1d       	adc	r31, r1
 b6a:	90 81       	ld	r25, Z
 b6c:	f9 01       	movw	r30, r18
 b6e:	90 83       	st	Z, r25
 b70:	8f 5f       	subi	r24, 0xFF	; 255
 b72:	16 96       	adiw	r26, 0x06	; 6
 b74:	9c 91       	ld	r25, X
 b76:	89 17       	cp	r24, r25
 b78:	88 f3       	brcs	.-30     	; 0xb5c <__stack+0x25d>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 b7a:	4f ef       	ldi	r20, 0xFF	; 255
 b7c:	5f ef       	ldi	r21, 0xFF	; 255
 b7e:	ba 01       	movw	r22, r20
 b80:	49 83       	std	Y+1, r20	; 0x01
 b82:	5a 83       	std	Y+2, r21	; 0x02
 b84:	6b 83       	std	Y+3, r22	; 0x03
 b86:	7c 83       	std	Y+4, r23	; 0x04
 b88:	8f ef       	ldi	r24, 0xFF	; 255
 b8a:	80 93 f7 00 	sts	0x00F7, r24
 b8e:	9a 81       	ldd	r25, Y+2	; 0x02
 b90:	92 95       	swap	r25
 b92:	96 95       	lsr	r25
 b94:	97 70       	andi	r25, 0x07	; 7
 b96:	8b 81       	ldd	r24, Y+3	; 0x03
 b98:	88 0f       	add	r24, r24
 b9a:	88 0f       	add	r24, r24
 b9c:	88 0f       	add	r24, r24
 b9e:	89 0f       	add	r24, r25
 ba0:	80 93 f6 00 	sts	0x00F6, r24
 ba4:	99 81       	ldd	r25, Y+1	; 0x01
 ba6:	92 95       	swap	r25
 ba8:	96 95       	lsr	r25
 baa:	97 70       	andi	r25, 0x07	; 7
 bac:	8a 81       	ldd	r24, Y+2	; 0x02
 bae:	88 0f       	add	r24, r24
 bb0:	88 0f       	add	r24, r24
 bb2:	88 0f       	add	r24, r24
 bb4:	89 0f       	add	r24, r25
 bb6:	80 93 f5 00 	sts	0x00F5, r24
 bba:	89 81       	ldd	r24, Y+1	; 0x01
 bbc:	88 0f       	add	r24, r24
 bbe:	88 0f       	add	r24, r24
 bc0:	88 0f       	add	r24, r24
 bc2:	44 ef       	ldi	r20, 0xF4	; 244
 bc4:	50 e0       	ldi	r21, 0x00	; 0
 bc6:	da 01       	movw	r26, r20
 bc8:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 bca:	ef ee       	ldi	r30, 0xEF	; 239
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	90 81       	ld	r25, Z
 bd0:	d8 01       	movw	r26, r16
 bd2:	16 96       	adiw	r26, 0x06	; 6
 bd4:	8c 91       	ld	r24, X
 bd6:	16 97       	sbiw	r26, 0x06	; 6
 bd8:	89 2b       	or	r24, r25
 bda:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	1a 96       	adiw	r26, 0x0a	; 10
 be0:	8c 93       	st	X, r24
 be2:	da 01       	movw	r26, r20
 be4:	8c 91       	ld	r24, X
 be6:	84 60       	ori	r24, 0x04	; 4
 be8:	8c 93       	st	X, r24
 bea:	80 ef       	ldi	r24, 0xF0	; 240
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	dc 01       	movw	r26, r24
 bf0:	2c 91       	ld	r18, X
 bf2:	24 60       	ori	r18, 0x04	; 4
 bf4:	2c 93       	st	X, r18
          Can_set_rplv();
 bf6:	80 81       	ld	r24, Z
 bf8:	80 62       	ori	r24, 0x20	; 32
 bfa:	80 83       	st	Z, r24
          Can_set_idemsk();
 bfc:	da 01       	movw	r26, r20
 bfe:	8c 91       	ld	r24, X
 c00:	81 60       	ori	r24, 0x01	; 1
 c02:	8c 93       	st	X, r24
          Can_config_rx();       
 c04:	80 81       	ld	r24, Z
 c06:	8f 73       	andi	r24, 0x3F	; 63
 c08:	80 83       	st	Z, r24
 c0a:	80 81       	ld	r24, Z
 c0c:	80 68       	ori	r24, 0x80	; 128
 c0e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c10:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 c12:	09 c0       	rjmp	.+18     	; 0xc26 <__stack+0x327>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
 c14:	f8 01       	movw	r30, r16
 c16:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c18:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
 c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__stack+0x327>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
 c1c:	8f e1       	ldi	r24, 0x1F	; 31
 c1e:	d8 01       	movw	r26, r16
 c20:	19 96       	adiw	r26, 0x09	; 9
 c22:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
 c24:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
 c26:	0f 90       	pop	r0
 c28:	0f 90       	pop	r0
 c2a:	0f 90       	pop	r0
 c2c:	0f 90       	pop	r0
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	1f 91       	pop	r17
 c34:	0f 91       	pop	r16
 c36:	08 95       	ret

00000c38 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
 c38:	ef 92       	push	r14
 c3a:	ff 92       	push	r15
 c3c:	1f 93       	push	r17
 c3e:	cf 93       	push	r28
 c40:	df 93       	push	r29
 c42:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
 c44:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
 c46:	88 23       	and	r24, r24
 c48:	09 f4       	brne	.+2      	; 0xc4c <can_get_status+0x14>
 c4a:	91 c0       	rjmp	.+290    	; 0xd6e <can_get_status+0x136>
 c4c:	8f 31       	cpi	r24, 0x1F	; 31
 c4e:	09 f4       	brne	.+2      	; 0xc52 <can_get_status+0x1a>
 c50:	90 c0       	rjmp	.+288    	; 0xd72 <can_get_status+0x13a>
 c52:	8f 3f       	cpi	r24, 0xFF	; 255
 c54:	09 f4       	brne	.+2      	; 0xc58 <can_get_status+0x20>
 c56:	8f c0       	rjmp	.+286    	; 0xd76 <can_get_status+0x13e>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
 c58:	88 81       	ld	r24, Y
 c5a:	82 95       	swap	r24
 c5c:	80 7f       	andi	r24, 0xF0	; 240
 c5e:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
 c62:	0e 94 84 00 	call	0x108	; 0x108 <can_get_mob_status>
 c66:	18 2f       	mov	r17, r24
    
    switch (a_status)
 c68:	80 32       	cpi	r24, 0x20	; 32
 c6a:	59 f0       	breq	.+22     	; 0xc82 <can_get_status+0x4a>
 c6c:	20 f4       	brcc	.+8      	; 0xc76 <can_get_status+0x3e>
 c6e:	88 23       	and	r24, r24
 c70:	09 f4       	brne	.+2      	; 0xc74 <can_get_status+0x3c>
 c72:	83 c0       	rjmp	.+262    	; 0xd7a <can_get_status+0x142>
 c74:	72 c0       	rjmp	.+228    	; 0xd5a <can_get_status+0x122>
 c76:	80 34       	cpi	r24, 0x40	; 64
 c78:	09 f4       	brne	.+2      	; 0xc7c <can_get_status+0x44>
 c7a:	64 c0       	rjmp	.+200    	; 0xd44 <can_get_status+0x10c>
 c7c:	80 3a       	cpi	r24, 0xA0	; 160
 c7e:	09 f0       	breq	.+2      	; 0xc82 <can_get_status+0x4a>
 c80:	6c c0       	rjmp	.+216    	; 0xd5a <can_get_status+0x122>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
 c82:	0f 2e       	mov	r0, r31
 c84:	ff ee       	ldi	r31, 0xEF	; 239
 c86:	ef 2e       	mov	r14, r31
 c88:	f1 2c       	mov	r15, r1
 c8a:	f0 2d       	mov	r31, r0
 c8c:	f7 01       	movw	r30, r14
 c8e:	80 81       	ld	r24, Z
 c90:	8f 70       	andi	r24, 0x0F	; 15
 c92:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
 c94:	8f 81       	ldd	r24, Y+7	; 0x07
 c96:	98 85       	ldd	r25, Y+8	; 0x08
 c98:	0e 94 97 00 	call	0x12e	; 0x12e <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
 c9c:	80 91 f0 00 	lds	r24, 0x00F0
 ca0:	82 fb       	bst	r24, 2
 ca2:	88 27       	eor	r24, r24
 ca4:	80 f9       	bld	r24, 0
 ca6:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
 ca8:	f7 01       	movw	r30, r14
 caa:	80 81       	ld	r24, Z
 cac:	84 ff       	sbrs	r24, 4
 cae:	2d c0       	rjmp	.+90     	; 0xd0a <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
 cb0:	81 e0       	ldi	r24, 0x01	; 1
 cb2:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
 cb4:	e3 ef       	ldi	r30, 0xF3	; 243
 cb6:	f0 e0       	ldi	r31, 0x00	; 0
 cb8:	80 81       	ld	r24, Z
 cba:	86 95       	lsr	r24
 cbc:	86 95       	lsr	r24
 cbe:	86 95       	lsr	r24
 cc0:	8d 83       	std	Y+5, r24	; 0x05
 cc2:	a2 ef       	ldi	r26, 0xF2	; 242
 cc4:	b0 e0       	ldi	r27, 0x00	; 0
 cc6:	8c 91       	ld	r24, X
 cc8:	90 81       	ld	r25, Z
 cca:	86 95       	lsr	r24
 ccc:	86 95       	lsr	r24
 cce:	86 95       	lsr	r24
 cd0:	f0 e2       	ldi	r31, 0x20	; 32
 cd2:	9f 9f       	mul	r25, r31
 cd4:	80 0d       	add	r24, r0
 cd6:	11 24       	eor	r1, r1
 cd8:	8c 83       	std	Y+4, r24	; 0x04
 cda:	e1 ef       	ldi	r30, 0xF1	; 241
 cdc:	f0 e0       	ldi	r31, 0x00	; 0
 cde:	80 81       	ld	r24, Z
 ce0:	9c 91       	ld	r25, X
 ce2:	86 95       	lsr	r24
 ce4:	86 95       	lsr	r24
 ce6:	86 95       	lsr	r24
 ce8:	20 e2       	ldi	r18, 0x20	; 32
 cea:	92 9f       	mul	r25, r18
 cec:	80 0d       	add	r24, r0
 cee:	11 24       	eor	r1, r1
 cf0:	8b 83       	std	Y+3, r24	; 0x03
 cf2:	80 91 f0 00 	lds	r24, 0x00F0
 cf6:	90 81       	ld	r25, Z
 cf8:	86 95       	lsr	r24
 cfa:	86 95       	lsr	r24
 cfc:	86 95       	lsr	r24
 cfe:	e0 e2       	ldi	r30, 0x20	; 32
 d00:	9e 9f       	mul	r25, r30
 d02:	80 0d       	add	r24, r0
 d04:	11 24       	eor	r1, r1
 d06:	8a 83       	std	Y+2, r24	; 0x02
 d08:	13 c0       	rjmp	.+38     	; 0xd30 <can_get_status+0xf8>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
 d0a:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
 d0c:	e3 ef       	ldi	r30, 0xF3	; 243
 d0e:	f0 e0       	ldi	r31, 0x00	; 0
 d10:	80 81       	ld	r24, Z
 d12:	82 95       	swap	r24
 d14:	86 95       	lsr	r24
 d16:	87 70       	andi	r24, 0x07	; 7
 d18:	8b 83       	std	Y+3, r24	; 0x03
 d1a:	80 91 f2 00 	lds	r24, 0x00F2
 d1e:	90 81       	ld	r25, Z
 d20:	99 0f       	add	r25, r25
 d22:	99 0f       	add	r25, r25
 d24:	99 0f       	add	r25, r25
 d26:	82 95       	swap	r24
 d28:	86 95       	lsr	r24
 d2a:	87 70       	andi	r24, 0x07	; 7
 d2c:	89 0f       	add	r24, r25
 d2e:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
 d30:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 d32:	ef ee       	ldi	r30, 0xEF	; 239
 d34:	f0 e0       	ldi	r31, 0x00	; 0
 d36:	80 81       	ld	r24, Z
 d38:	8f 73       	andi	r24, 0x3F	; 63
 d3a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 d3c:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
 d40:	80 e0       	ldi	r24, 0x00	; 0
            break;
 d42:	1c c0       	rjmp	.+56     	; 0xd7c <can_get_status+0x144>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
 d44:	80 e4       	ldi	r24, 0x40	; 64
 d46:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
 d48:	ef ee       	ldi	r30, 0xEF	; 239
 d4a:	f0 e0       	ldi	r31, 0x00	; 0
 d4c:	80 81       	ld	r24, Z
 d4e:	8f 73       	andi	r24, 0x3F	; 63
 d50:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 d52:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
 d56:	80 e0       	ldi	r24, 0x00	; 0
            break;
 d58:	11 c0       	rjmp	.+34     	; 0xd7c <can_get_status+0x144>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
 d5a:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 d5c:	ef ee       	ldi	r30, 0xEF	; 239
 d5e:	f0 e0       	ldi	r31, 0x00	; 0
 d60:	80 81       	ld	r24, Z
 d62:	8f 73       	andi	r24, 0x3F	; 63
 d64:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 d66:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
 d6a:	82 e0       	ldi	r24, 0x02	; 2
            break;
 d6c:	07 c0       	rjmp	.+14     	; 0xd7c <can_get_status+0x144>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
 d6e:	82 e0       	ldi	r24, 0x02	; 2
 d70:	05 c0       	rjmp	.+10     	; 0xd7c <can_get_status+0x144>
 d72:	82 e0       	ldi	r24, 0x02	; 2
 d74:	03 c0       	rjmp	.+6      	; 0xd7c <can_get_status+0x144>
 d76:	82 e0       	ldi	r24, 0x02	; 2
 d78:	01 c0       	rjmp	.+2      	; 0xd7c <can_get_status+0x144>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
 d7a:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
 d7c:	df 91       	pop	r29
 d7e:	cf 91       	pop	r28
 d80:	1f 91       	pop	r17
 d82:	ff 90       	pop	r15
 d84:	ef 90       	pop	r14
 d86:	08 95       	ret

00000d88 <LED_Reg_Write>:

#include <avr/io.h>
#include "LED.h"

void LED_Reg_Write(uint8_t val) {
	LEDPORT = ~val;
 d88:	80 95       	com	r24
 d8a:	85 b9       	out	0x05, r24	; 5
 d8c:	08 95       	ret

00000d8e <main>:
volatile uint8_t CTC_flag;

uint8_t response_data[DATA_BUFFER_SIZE];

int main(void)
{		
 d8e:	cf 93       	push	r28
 d90:	df 93       	push	r29
 d92:	cd b7       	in	r28, 0x3d	; 61
 d94:	de b7       	in	r29, 0x3e	; 62
 d96:	2c 97       	sbiw	r28, 0x0c	; 12
 d98:	0f b6       	in	r0, 0x3f	; 63
 d9a:	f8 94       	cli
 d9c:	de bf       	out	0x3e, r29	; 62
 d9e:	0f be       	out	0x3f, r0	; 63
 da0:	cd bf       	out	0x3d, r28	; 61
    }
}

void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
 da2:	e1 e6       	ldi	r30, 0x61	; 97
 da4:	f0 e0       	ldi	r31, 0x00	; 0
 da6:	80 e8       	ldi	r24, 0x80	; 128
 da8:	80 83       	st	Z, r24
	CLKPR = 0x00;
 daa:	10 82       	st	Z, r1
}

void io_init(void) {
	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFF;
 dac:	8f ef       	ldi	r24, 0xFF	; 255
 dae:	84 b9       	out	0x04, r24	; 4
	LED_Reg_Write(0x00); // clear all LEDs
 db0:	80 e0       	ldi	r24, 0x00	; 0
 db2:	0e 94 c4 06 	call	0xd88	; 0xd88 <LED_Reg_Write>
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x00;
 db6:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
 db8:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x00;
 dba:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
 dbc:	1b b8       	out	0x0b, r1	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
 dbe:	1d b8       	out	0x0d, r1	; 13
	PORTD = 0x00;
 dc0:	1b b8       	out	0x0b, r1	; 11
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
 dc2:	0e 94 3c 07 	call	0xe78	; 0xe78 <timer_init>
	can_init(0);
 dc6:	80 e0       	ldi	r24, 0x00	; 0
 dc8:	0e 94 c1 00 	call	0x182	; 0x182 <can_init>
{		
	// Initialize I/O, Timer, and CAN peripheral
	sys_init();
	
	// Enable global interrupts for Timer execution
	sei();
 dcc:	78 94       	sei
	
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0xAA);
 dce:	8a ea       	ldi	r24, 0xAA	; 170
 dd0:	0e 94 c4 06 	call	0xd88	; 0xd88 <LED_Reg_Write>
	delay_ms(50);
 dd4:	82 e3       	ldi	r24, 0x32	; 50
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	0e 94 56 07 	call	0xeac	; 0xeac <delay_ms>
	LED_Reg_Write(0x00);
 ddc:	80 e0       	ldi	r24, 0x00	; 0
 dde:	0e 94 c4 06 	call	0xd88	; 0xd88 <LED_Reg_Write>
	st_cmd_t reply_message; // response message object
	
    while(1)
    {
		// Simulate collecting local sensor data: put test bytes in response buffer
		response_data[0] = MY_ID_TAG;
 de2:	00 e0       	ldi	r16, 0x00	; 0
 de4:	11 e0       	ldi	r17, 0x01	; 1
 de6:	68 94       	set
 de8:	88 24       	eor	r8, r8
 dea:	87 f8       	bld	r8, 7
		if(MY_ID_TAG == 0x80) { response_data[1] = 0x3C; }
 dec:	0f 2e       	mov	r0, r31
 dee:	f1 e0       	ldi	r31, 0x01	; 1
 df0:	cf 2e       	mov	r12, r31
 df2:	f1 e0       	ldi	r31, 0x01	; 1
 df4:	df 2e       	mov	r13, r31
 df6:	f0 2d       	mov	r31, r0
 df8:	0f 2e       	mov	r0, r31
 dfa:	fc e3       	ldi	r31, 0x3C	; 60
 dfc:	9f 2e       	mov	r9, r31
 dfe:	f0 2d       	mov	r31, r0
		if(MY_ID_TAG == 0x81) { response_data[1] = 0x0F; }
			
		reply_message.pt_data = &response_data[0]; // point message object to first element of data buffer
		reply_message.ctrl.ide = 0; // standard CAN frame type (2.0A)
		reply_message.dlc = DATA_BUFFER_SIZE; // Number of bytes being sent (8 max)
 e00:	68 94       	set
 e02:	aa 24       	eor	r10, r10
 e04:	a1 f8       	bld	r10, 1
		reply_message.id.std = MY_ID_TAG; // populate ID field with ID Tag
 e06:	68 94       	set
 e08:	ee 24       	eor	r14, r14
 e0a:	e7 f8       	bld	r14, 7
 e0c:	f1 2c       	mov	r15, r1
		reply_message.cmd = CMD_REPLY_MASKED; // assign this as a "Standard (2.0A) Reply" message object
 e0e:	0f 2e       	mov	r0, r31
 e10:	fb e0       	ldi	r31, 0x0B	; 11
 e12:	bf 2e       	mov	r11, r31
 e14:	f0 2d       	mov	r31, r0
	st_cmd_t reply_message; // response message object
	
    while(1)
    {
		// Simulate collecting local sensor data: put test bytes in response buffer
		response_data[0] = MY_ID_TAG;
 e16:	f8 01       	movw	r30, r16
 e18:	80 82       	st	Z, r8
		if(MY_ID_TAG == 0x80) { response_data[1] = 0x3C; }
 e1a:	f6 01       	movw	r30, r12
 e1c:	90 82       	st	Z, r9
		if(MY_ID_TAG == 0x81) { response_data[1] = 0x0F; }
			
		reply_message.pt_data = &response_data[0]; // point message object to first element of data buffer
 e1e:	19 87       	std	Y+9, r17	; 0x09
 e20:	08 87       	std	Y+8, r16	; 0x08
		reply_message.ctrl.ide = 0; // standard CAN frame type (2.0A)
 e22:	1c 86       	std	Y+12, r1	; 0x0c
		reply_message.dlc = DATA_BUFFER_SIZE; // Number of bytes being sent (8 max)
 e24:	af 82       	std	Y+7, r10	; 0x07
		reply_message.id.std = MY_ID_TAG; // populate ID field with ID Tag
 e26:	fc 82       	std	Y+4, r15	; 0x04
 e28:	eb 82       	std	Y+3, r14	; 0x03
		reply_message.cmd = CMD_REPLY_MASKED; // assign this as a "Standard (2.0A) Reply" message object
 e2a:	ba 82       	std	Y+2, r11	; 0x02
		
		while(can_cmd(&reply_message) != CAN_CMD_ACCEPTED); // wait for MOb to configure
 e2c:	ce 01       	movw	r24, r28
 e2e:	01 96       	adiw	r24, 0x01	; 1
 e30:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <can_cmd>
 e34:	81 11       	cpse	r24, r1
 e36:	fa cf       	rjmp	.-12     	; 0xe2c <main+0x9e>
		
		while(can_get_status(&reply_message) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in, and send a response
 e38:	ce 01       	movw	r24, r28
 e3a:	01 96       	adiw	r24, 0x01	; 1
 e3c:	0e 94 1c 06 	call	0xc38	; 0xc38 <can_get_status>
 e40:	81 30       	cpi	r24, 0x01	; 1
 e42:	d1 f3       	breq	.-12     	; 0xe38 <main+0xaa>
		
		// Flash LED0 to indicate a transmit request has been received from Hub Node
		LED_Reg_Write(0x01);
 e44:	81 e0       	ldi	r24, 0x01	; 1
 e46:	0e 94 c4 06 	call	0xd88	; 0xd88 <LED_Reg_Write>
		delay_ms(25);
 e4a:	89 e1       	ldi	r24, 0x19	; 25
 e4c:	90 e0       	ldi	r25, 0x00	; 0
 e4e:	0e 94 56 07 	call	0xeac	; 0xeac <delay_ms>
		LED_Reg_Write(0x00);
 e52:	80 e0       	ldi	r24, 0x00	; 0
 e54:	0e 94 c4 06 	call	0xd88	; 0xd88 <LED_Reg_Write>
    }
 e58:	de cf       	rjmp	.-68     	; 0xe16 <main+0x88>

00000e5a <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
 e5a:	1f 92       	push	r1
 e5c:	0f 92       	push	r0
 e5e:	0f b6       	in	r0, 0x3f	; 63
 e60:	0f 92       	push	r0
 e62:	11 24       	eor	r1, r1
 e64:	8f 93       	push	r24
	CTC_flag = 1;
 e66:	81 e0       	ldi	r24, 0x01	; 1
 e68:	80 93 02 01 	sts	0x0102, r24
}
 e6c:	8f 91       	pop	r24
 e6e:	0f 90       	pop	r0
 e70:	0f be       	out	0x3f, r0	; 63
 e72:	0f 90       	pop	r0
 e74:	1f 90       	pop	r1
 e76:	18 95       	reti

00000e78 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
 e78:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
 e7c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
 e80:	8a e0       	ldi	r24, 0x0A	; 10
 e82:	80 93 81 00 	sts	0x0081, r24
 e86:	08 95       	ret

00000e88 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
 e88:	10 92 02 01 	sts	0x0102, r1
	TCNT1 = 0x0000; //Clear timer
 e8c:	10 92 85 00 	sts	0x0085, r1
 e90:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
 e94:	90 93 89 00 	sts	0x0089, r25
 e98:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
 e9c:	82 e0       	ldi	r24, 0x02	; 2
 e9e:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
 ea2:	80 91 02 01 	lds	r24, 0x0102
 ea6:	88 23       	and	r24, r24
 ea8:	e1 f3       	breq	.-8      	; 0xea2 <delay_us+0x1a>
}
 eaa:	08 95       	ret

00000eac <delay_ms>:

void delay_ms(uint16_t ms) {
 eac:	0f 93       	push	r16
 eae:	1f 93       	push	r17
 eb0:	cf 93       	push	r28
 eb2:	df 93       	push	r29
 eb4:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
 eb6:	00 97       	sbiw	r24, 0x00	; 0
 eb8:	51 f0       	breq	.+20     	; 0xece <delay_ms+0x22>
 eba:	c0 e0       	ldi	r28, 0x00	; 0
 ebc:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
 ebe:	88 ee       	ldi	r24, 0xE8	; 232
 ec0:	93 e0       	ldi	r25, 0x03	; 3
 ec2:	0e 94 44 07 	call	0xe88	; 0xe88 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
 ec6:	21 96       	adiw	r28, 0x01	; 1
 ec8:	c0 17       	cp	r28, r16
 eca:	d1 07       	cpc	r29, r17
 ecc:	c1 f7       	brne	.-16     	; 0xebe <delay_ms+0x12>
		delay_us(1000);
	}
 ece:	df 91       	pop	r29
 ed0:	cf 91       	pop	r28
 ed2:	1f 91       	pop	r17
 ed4:	0f 91       	pop	r16
 ed6:	08 95       	ret

00000ed8 <_exit>:
 ed8:	f8 94       	cli

00000eda <__stop_program>:
 eda:	ff cf       	rjmp	.-2      	; 0xeda <__stop_program>
